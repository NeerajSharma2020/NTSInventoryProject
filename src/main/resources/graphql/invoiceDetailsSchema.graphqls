scalar LocalDateTime

type Invoice{
    invoiceId:Int!
    createDate: LocalDateTime
    dueDate:LocalDateTime
    invoiceNumber: String
    status: String
    factSONumber: String
    proNumber: String
    notes:String
    invoiceAmount:Float
    commissionPercentage:Float
    commissionAmount:Float
    invoiceDetails:[InvoiceDetails]
}

type InvoiceDetails{
  invoiceDetailId:Int!
  invoice:Invoice
  product:Product
  productCount:Int
}

input InvoiceInput {
    invoiceId:Int
    createDate: LocalDateTime!
    status: String
    factSONumber: String
    proNumber: String
    notes:String
    invoiceAmount:Float!
    commissionPercentage:Float!
}

input InvoiceDetailsInput{
  invoice:InvoiceInput
  product:ProductInput
  productCount:Int
}

input InvoiceUpdateInput{
invoiceId:Int!
createDate: LocalDateTime
dueDate:LocalDateTime
invoiceNumber: String
status: String
factSONumber: String
proNumber: String
notes:String
invoiceAmount:Float
commissionPercentage:Float
commissionAmount:Float
}

input InvoiceDetailsUpdateInput{
  invoiceDetailId:Int!
  invoice:InvoiceUpdateInput
  product:ProductInput
  productCount:Int
}

extend type Query {
   findAllInvoiceDetails:[InvoiceDetails]
   findInvoiceDetailsById(InvoiceDetailsID:Int!):InvoiceDetails
}

extend type Mutation {
    saveInvoiceDetails(invoiceDetailsInput:InvoiceDetailsInput,productId:Int!):InvoiceDetails
    deleteInvoiceDetailById(invoiceDetailsId:Int!):String
    updateInvoiceDetails(invoiceDetail:InvoiceDetailsUpdateInput):InvoiceDetails
 }


